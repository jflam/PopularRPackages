library(shiny)
# Packages that I own investigating install.packages("caret") install.packages("shiny") install.packages("xtable") install.packages("sp") install.packages("maptools") install.packages("maps") install.packages("ggmap") install.packages("zoo") install.packages("xts") # Dependencies not explicitly called out in these packages install.packages("AppliedPredictiveModeling") # for caret install.packages("pbkrtest") # for caret install.packages("ellipse") # for caret install.packages("mlbench") # for caret install.packages("earth") # for caret
library(shiny)
version
library(shiny)
runApp("shiny_1")
3 _ #
3 + 3
runExample("02_text") # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg") # global variables
runExample("05_sliders") # slider bars
runExample("06_tabsets") # tabbed panels
library(shiny)
runExample("06_tabsets") # tabbed panels
library(xtable)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
data(tli)
xtable(tli[1:10,])
autoformat(mtcars)
x <- xtable(mtcars)
align(x) <- xalign(x)
autoformat(x)
mat <- round(matrix(c(0.9, 0.89, 200, 0.045, 2.0), c(1, 5)), 4)
rownames(mat) <- "$y_{t-1}$"
colnames(mat) <- c("$R^2$", "$\\bar{R}^2$", "F-stat", "S.E.E", "DW")
print(xtable(mat), type = "latex", sanitize.text.function = function(x) {     x })
print(tli.table)
methods(xtable)
xtable(mtcars)
xtable(mtcars, type="html")
xtable(mtcars, type="html")
t <- xtable(mtcars, type="html")
print.xtable(t, type = "html")
xtable(mtcars)
library(dismo)
install.packages("dismo") # for sp
library(dismo)
mymap <- gmap("France") # choose whatever country
install.packages("rgdal") # for sp
mymap <- gmap("France") # choose whatever country
plot(mymap)
mymap <- gmap("USA") # choose whatever country
plot(mymap)
mymap <- gmap("USA", type="satellite")
plot(mymap)
mymap <- gmap("USA", type = "satellite", exp = 3)
plot(mymap)
mymap <- gmap("USA", type = "satellite", exp = 15)
plot(mymap)
mymap <- gmap("USA", type = "satellite", exp = 1)
plot(mymap)
mymap <- gmap("USA", type = "satellite", exp = -1)
plot(mymap)
library(RgoogleMaps) newmap <- GetMap(center = c(36.7, -5.9), zoom = 10, destfile = "newmap.png",     maptype = "satellite") # Now using bounding box instead of center coordinates: newmap2 <- GetMap.bbox(lonR = c(-5, -6), latR = c(36, 37), destfile = "newmap2.png",     maptype = "terrain") # Try different maptypes newmap3 <- GetMap.bbox(lonR = c(-5, -6), latR = c(36, 37), destfile = "newmap3.png",     maptype = "satellite")
install.packages("RgoogleMaps") # for sp
library(RgoogleMaps) newmap <- GetMap(center = c(36.7, -5.9), zoom = 10, destfile = "newmap.png",     maptype = "satellite") # Now using bounding box instead of center coordinates: newmap2 <- GetMap.bbox(lonR = c(-5, -6), latR = c(36, 37), destfile = "newmap2.png",     maptype = "terrain") # Try different maptypes newmap3 <- GetMap.bbox(lonR = c(-5, -6), latR = c(36, 37), destfile = "newmap3.png",     maptype = "satellite") PlotOnStaticMap(lat = c(36.3, 35.8, 36.4), lon = c(-5.5, -5.6, -5.8), zoom = 10,     cex = 4, pch = 19, col = "red", FUN = points, add = F)
install.packages("googlevis") # for sp
library(googleVis)
library(googlevis)
install.packages("googlevis") # for sp
library(googlevis)
library(googleVis)
data(Exports) # a simple data frame
Geo <- gvisGeoMap(Exports, locationvar = "Country", numvar = "Profit",                   options = list(height = 400, dataMode = 'regions'))
locs.gb
library(dismo) # check also the nice 'rgbif' package! 
laurus <- gbif("Laurus", "nobilis")
locs <- subset(laurus, select = c("country", "lat", "lon"))
head(locs) # a simple data frame with coordinates
locs <- subset(locs, locs$lat < 90)
locs.gb <- subset(locs, locs$country == "United Kingdom") # select only locs in UK
plot(locs.gb, pch = 20, cex = 2, col = "steelblue")
title("Laurus nobilis occurrences in UK")
plot(countriesLow, add = T)
table(locs$country)
gbmap <- gmap(locs.gb, type = "satellite")
locs.gb.merc <- Mercator(locs.gb) # Google Maps are in Mercator projection. 
coordinates(locs) <- c("lon", "lat") # set spatial coordinates
plot(locs)
crs.geo <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84") # geographical, datum WGS84
proj4string(locs) <- crs.geo # define projection system of our data
summary(locs)
plot(locs, pch = 20, col = "steelblue")
library(rworldmap)
data(coastsCoarse)
data(countriesLow)
plot(coastsCoarse, add = T)
table(locs$country) # see localities of Laurus nobilis by country
plot(locs.gb, pch = 20, cex = 2, col = "steelblue")
locs.gb <- subset(locs, locs$country == "United Kingdom") # select only locs in UK
plot(locs.gb, pch = 20, cex = 2, col = "steelblue")
title("Laurus nobilis occurrences in UK")
plot(countriesLow, add = T)
gbmap <- gmap(locs.gb, type = "satellite")
locs.gb.merc <- Mercator(locs.gb) # Google Maps are in Mercator projection. 
plot(gbmap)
points(locs.gb.merc, pch = 20, col="red")
require(RgoogleMaps)
locs.gb.coords <- as.data.frame(coordinates(locs.gb)) # retrieves coordinates 
PlotOnStaticMap(lat = locs.gb.coords$lat, lon = locs.gb.coords$lon, zoom = 5,     cex = 1.4, pch = 19, col = "red", FUN = points, add = F)
PlotOnStaticMap(lat = locs.gb.coords$lat, lon = locs.gb.coords$lon, zoom = 5,     cex = 1.4, pch = 19, col = "red", FUN = points, add = F, size = 1)
PlotOnStaticMap(lat = locs.gb.coords$lat, lon = locs.gb.coords$lon, zoom = 5, cex = 1.4, pch = 19, col = "red", FUN = points, add = F, size = 1)
PlotOnStaticMap(lat = locs.gb.coords$lat, lon = locs.gb.coords$lon, zoom = 5, cex = 1.4, pch = 19, col = "red", FUN = points, add = F, size = 1)
library(sp)
vignette("sp")
?vignette
vignette("sp")
vignette("intro_sp")
library(dismo)
library(dismo)
mymap <- gmap("USA") 
plot(mymap)
vignettes()
vignette(all=FALSE)
vignette("brt")
